# You need to have:
# AKS target cluster set as the current kubectl context
# AKS should have Dapr and KEDA installed (refer to the README)
# All Azure dependent services are provisioned and the connection keys are ready

# Azure Container Registry name
ACR_NAME=REPLACE

# Make sure that the bash command line folder context set to the root where dockerfile exists

#############
# Namespace #
#############

# Deployments will be installed to iot-hub-gateway namespace, so we need to create first:

kubectl create namespace iot-hub-gateway

################
# Orchestrator #
################

# Set folder context to src/GatewayOrchestrator
cd src/GatewayOrchestrator

# Container build and push
az acr build -t iothub/gateway-orchestrator:{{.Run.ID}} -t iothub/gateway-orchestrator:latest -r $ACR_NAME .

# I'm getting here the latest unique tag generated by the ACR build task to be used in the deployment files
# as it is not recommended to use 'latest' in production
ORCH_IMAGE_TAG=$(az acr repository show-tags -n $ACR_NAME --repository iothub/gateway-orchestrator --top 2 --orderby time_desc --query '[1]' -o tsv)
echo $ORCH_IMAGE_TAG

# Update the following files:
# deployment.yaml: replace the ACR name and use custom image tag generated above
# deployment-secrets.yaml: connectionString: with service bus connection string and APPINSIGHTS_CONNECTIONSTRING: connection string

# Adding services
kubectl apply -f ./Deployments/components
kubectl apply -f ./Deployment

# Validate
kubectl get pod,svc -n iot-hub-gateway

# Test the APIs
kubectl port-forward -n iot-hub-gateway service/gateway-orchestrator-http-service 8080:80
curl http://localhost:8080/api/GatewayOrchestrator/version

# Useful commands
# Restart the deployment
kubectl rollout restart deployment -n iot-hub-gateway gateway-orchestrator-http-deployment

##############
# Translator #
##############

cd src/GatewayTranslator

# Container build and push
az acr build -t iothub/gateway-translator:{{.Run.ID}} -t iothub/gateway-translator:latest -r $ACR_NAME .

# I'm getting here the latest unique tag generated by the ACR build task to be used in the deployment files
# as it is not recommended to use 'latest' in production
TRANS_IMAGE_TAG=$(az acr repository show-tags -n $ACR_NAME --repository iothub/gateway-translator --top 2 --orderby time_desc --query '[1]' -o tsv)
echo $TRANS_IMAGE_TAG

# Update the following files:
# deployment.yaml: replace the ACR name
# deployment-secrets.yaml: connectionString: with service bus connection string and APPINSIGHTS_CONNECTIONSTRING: connection string

# Adding services
kubectl apply -f ./Deployments/components
kubectl apply -f ./Deployment

# Validate
kubectl get pod,svc -n iot-hub-gateway

# Testing the API (via the pod as there is no service)
WORKLOAD_POD=$(kubectl get pods -n iot-hub-gateway -l app=gateway-translator-sb -o jsonpath='{.items[0].metadata.name}')
echo $WORKLOAD_POD
kubectl port-forward -n iot-hub-gateway pod/$WORKLOAD_POD 8081:80
curl http://localhost:8081/api/GatewayTranslator/version

# Useful commands
# Restart the deployment
kubectl rollout restart deployment -n iot-hub-gateway gateway-translator-sb-deployment

##################
# Gateway Server #
##################

cd src/GatewayServer

# Container build and push
az acr build -t iothub/gateway-server:{{.Run.ID}} -t iothub/gateway-server:latest -r $ACR_NAME .

# I'm getting here the latest unique tag generated by the ACR build task to be used in the deployment files
# as it is not recommended to use 'latest' in production
SERVER_IMAGE_TAG=$(az acr repository show-tags -n $ACR_NAME --repository iothub/gateway-server --top 2 --orderby time_desc --query '[1]' -o tsv)
echo $SERVER_IMAGE_TAG

# Update the following files:
# deployment.yaml: replace the ACR name
# deployment-secrets.yaml: connectionString: with IoT Hub connection string and APPINSIGHTS_CONNECTIONSTRING: connection string

# Adding services
kubectl apply -f ./Deployments/components
kubectl apply -f ./Deployment

# Validate
kubectl get pod,svc -n iot-hub-gateway

# Test the APIs
kubectl port-forward service/gateway-server-http-service 8082:80 -n iot-hub-gateway
curl -i http://localhost:8082/healthz
curl -i http://localhost:8082/health-details
curl -i http://localhost:8082/api/gateway/status
# Useful commands
# Restart the deployment
kubectl rollout restart deployment -n iot-hub-gateway gateway-server-http-deployment